name: Publish Python Package to PyPI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  workflow_run:
    types: [ completed ]
    workflows: [ Create Release Tag on Master Push ]

permissions:
  id-token: write
  contents: read

jobs:
  publish-to-pypi:
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/parsescore-client

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}

      - name: Determine Package Version for Publishing
        id: determine_package_version
        run: |
          VERSION_TO_PUBLISH=""
          echo "Determining version based on trigger: ${{ github.event_name }}, ref: ${{ github.ref }}"

          if [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Triggered by a direct tag push 'v*'
            TAG_NAME="${{ github.ref_name }}" # e.g., v0.1.2
            VERSION_TO_PUBLISH="${TAG_NAME#v}"
            echo "Source: Git Tag. Version: ${VERSION_TO_PUBLISH}"
          elif [ "${{ github.event_name }}" == "workflow_run" ]; then
            # Triggered by completion of 'Create Release Tag on Master Push' workflow.
            # That workflow uses pyproject.toml from its commit to create the tag.
            # The checkout is set to github.event.workflow_run.head_sha, so pyproject.toml is authoritative.
            PYPROJECT_PATH="pyproject.toml"
            if [ ! -f "${PYPROJECT_PATH}" ]; then echo "Error: ${PYPROJECT_PATH} not found!"; exit 1; fi
            VERSION_TO_PUBLISH=$(python -c "import tomllib; print(tomllib.load(open('${PYPROJECT_PATH}', 'rb'))['project']['version'])")
            echo "Source: pyproject.toml (via workflow_run). Version: ${VERSION_TO_PUBLISH}"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manually dispatched.
            # If dispatched on a tag ref that starts with 'v', use that tag's version.
            if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
              TAG_NAME="${{ github.ref_name }}"
              VERSION_TO_PUBLISH="${TAG_NAME#v}"
              echo "Source: Git Tag (via workflow_dispatch). Version: ${VERSION_TO_PUBLISH}"
            else
              # Dispatched on a branch (or a non-'v*' tag). Use pyproject.toml from this ref.
              PYPROJECT_PATH="pyproject.toml"
              if [ ! -f "${PYPROJECT_PATH}" ]; then echo "Error: ${PYPROJECT_PATH} not found!"; exit 1; fi
              VERSION_TO_PUBLISH=$(python -c "import tomllib; print(tomllib.load(open('${PYPROJECT_PATH}', 'rb'))['project']['version'])")
              echo "Source: pyproject.toml (via workflow_dispatch on ref ${{ github.ref_name }}). Version: ${VERSION_TO_PUBLISH}"
            fi
          else
            echo "Error: Unhandled event '${{ github.event_name }}' or ref '${{ github.ref }}'. Cannot determine version."
            exit 1
          fi

          if [ -z "${VERSION_TO_PUBLISH}" ]; then
            echo "Error: Package version could not be determined."
            exit 1
          fi
          
          echo "package_version=${VERSION_TO_PUBLISH}" >> $GITHUB_OUTPUT
          echo "Final package_version for publishing: ${VERSION_TO_PUBLISH}"
        shell: bash

      - name: Verify pyproject.toml version consistency
        run: |
          PYPROJECT_PATH="pyproject.toml" # Adjust if needed
          if [ ! -f "${PYPROJECT_PATH}" ]; then echo "Error: ${PYPROJECT_PATH} not found!"; exit 1; fi
          PYPROJECT_VERSION_FROM_FILE=$(python -c "import tomllib; print(tomllib.load(open('${PYPROJECT_PATH}', 'rb'))['project']['version'])")
          # This is the version determined by the trigger logic, which we intend to publish.
          VERSION_FOR_PUBLISHING="${{ steps.determine_package_version.outputs.package_version }}" 
          
          echo "Version intended for publishing (from trigger logic): ${VERSION_FOR_PUBLISHING}"
          echo "Version currently in pyproject.toml: ${PYPROJECT_VERSION_FROM_FILE}"
          
          if [ "${PYPROJECT_VERSION_FROM_FILE}" != "${VERSION_FOR_PUBLISHING}" ]; then
            echo "Error: Version in pyproject.toml (${PYPROJECT_VERSION_FROM_FILE}) does not match version determined for publishing (${VERSION_FOR_PUBLISHING})."
            echo "This might indicate an inconsistent state or a change in pyproject.toml after the triggering event, or an incorrect ref checkout."
            exit 1
          fi
          echo "Versions are consistent. Proceeding to publish version ${VERSION_FOR_PUBLISHING}."
        shell: bash

      - name: Install uv
        uses: astral-sh/setup-uv@v5 # Ensure this action is compatible or update if necessary
        with:
          version: "latest"

      - name: Set up Python (using version from pyproject.toml)
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Build package
        run: uv build

      - name: Store the distribution packages (optional, for inspection)
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions-${{ steps.determine_package_version.outputs.package_version }}
          path: dist/

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
